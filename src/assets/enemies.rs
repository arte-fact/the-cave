use crate::game::enemy::{Behavior, Enemy, EnemyState};
use crate::game::features::position::Position;

use super::tiles::EnemyTiles;

pub enum Enemies {
    Rat,
    Bat,
    Snake,
    Aligator,
    TRex,
    Tiger,
    Scorpion,
    Spider,
    Dragon,
    Crab,
}

impl Enemies {
    pub fn to_enemy(&self) -> Enemy {
        match self {
            Enemies::Crab => Enemy {
                name: "Crab".to_string(),
                tile: EnemyTiles::Crab.to_tile(),
                health: 10,
                attack: 1,
                occurences: 10,
                defense: 0,
                position: Position { x: 0, y: 0 },
                behavior: Behavior::Defensive,
                state: EnemyState::Idle,
                drop: vec![],
            },
            Enemies::Rat => Enemy {
                name: "Rat".to_string(),
                tile: EnemyTiles::Rat.to_tile(),
                health: 20,
                attack: 2,
                occurences: 10,
                defense: 0,
                position: Position { x: 0, y: 0 },
                behavior: Behavior::Aggressive,
                state: EnemyState::Idle,
                drop: vec![],
            },
            Enemies::Bat => Enemy {
                name: "Bat".to_string(),
                tile: EnemyTiles::Bat.to_tile(),
                health: 30,
                attack: 5,
                occurences: 10,
                defense: 0,
                position: Position { x: 0, y: 0 },
                behavior: Behavior::Aggressive,
                state: EnemyState::Idle,
                drop: vec![],
            },
            Enemies::Snake => Enemy {
                name: "Snake".to_string(),
                tile: EnemyTiles::Snake.to_tile(),
                health: 30,
                attack: 5,
                occurences: 20,
                defense: 0,
                position: Position { x: 0, y: 0 },
                behavior: Behavior::Aggressive,
                state: EnemyState::Idle,
                drop: vec![],
            },
            Enemies::Scorpion => Enemy {
                name: "Scorpion".to_string(),
                tile: EnemyTiles::Scorpion.to_tile(),
                health: 40,
                attack: 10,
                occurences: 10,
                defense: 0,
                position: Position { x: 0, y: 0 },
                behavior: Behavior::Aggressive,
                state: EnemyState::Idle,
                drop: vec![],
            },
            Enemies::Spider => Enemy {
                name: "Spider".to_string(),
                tile: EnemyTiles::Spider.to_tile(),
                health: 40,
                attack: 10,
                occurences: 10,
                defense: 0,
                position: Position { x: 0, y: 0 },
                behavior: Behavior::Aggressive,
                state: EnemyState::Idle,
                drop: vec![],
            },
            Enemies::Aligator => Enemy {
                name: "Aligator".to_string(),
                tile: EnemyTiles::Aligator.to_tile(),
                health: 75,
                attack: 15,
                occurences: 5,
                defense: 5,
                position: Position { x: 0, y: 0 },
                behavior: Behavior::Aggressive,
                state: EnemyState::Idle,
                drop: vec![],
            },
            Enemies::Tiger => Enemy {
                name: "Tiger".to_string(),
                tile: EnemyTiles::Tiger.to_tile(),
                health: 50,
                attack: 15,
                occurences: 5,
                defense: 0,
                position: Position { x: 0, y: 0 },
                behavior: Behavior::Aggressive,
                state: EnemyState::Idle,
                drop: vec![],
            },
            Enemies::TRex => Enemy {
                name: "T-rex".to_string(),
                tile: EnemyTiles::TRex.to_tile(),
                health: 100,
                attack: 20,
                occurences: 5,
                defense: 0,
                position: Position { x: 0, y: 0 },
                behavior: Behavior::Aggressive,
                state: EnemyState::Idle,
                drop: vec![],
            },
            Enemies::Dragon => Enemy {
                name: "Dragon".to_string(),
                tile: EnemyTiles::Dragon.to_tile(),
                health: 200,
                occurences: 1,
                attack: 40,
                defense: 10,
                position: Position { x: 0, y: 0 },
                behavior: Behavior::Aggressive,
                state: EnemyState::Idle,
                drop: vec![],
            },
        }
    }

}
